// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	color "github.com/tagatac/maroto/pkg/color"

	mock "github.com/stretchr/testify/mock"

	props "github.com/tagatac/maroto/pkg/props"
)

// MarotoGridPart is an autogenerated mock type for the MarotoGridPart type
type MarotoGridPart struct {
	mock.Mock
}

// Col provides a mock function with given fields: width, closure
func (_m *MarotoGridPart) Col(width uint, closure func()) {
	_m.Called(width, closure)
}

// ColSpace provides a mock function with given fields: width
func (_m *MarotoGridPart) ColSpace(width uint) {
	_m.Called(width)
}

// GetCurrentOffset provides a mock function with given fields:
func (_m *MarotoGridPart) GetCurrentOffset() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetPageMargins provides a mock function with given fields:
func (_m *MarotoGridPart) GetPageMargins() (float64, float64, float64, float64) {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 float64
	if rf, ok := ret.Get(2).(func() float64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(float64)
	}

	var r3 float64
	if rf, ok := ret.Get(3).(func() float64); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(float64)
	}

	return r0, r1, r2, r3
}

// GetPageSize provides a mock function with given fields:
func (_m *MarotoGridPart) GetPageSize() (float64, float64) {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// Line provides a mock function with given fields: spaceHeight, line
func (_m *MarotoGridPart) Line(spaceHeight float64, line ...props.Line) {
	_va := make([]interface{}, len(line))
	for _i := range line {
		_va[_i] = line[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spaceHeight)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Row provides a mock function with given fields: height, closure
func (_m *MarotoGridPart) Row(height float64, closure func()) {
	_m.Called(height, closure)
}

// SetBackgroundColor provides a mock function with given fields: _a0
func (_m *MarotoGridPart) SetBackgroundColor(_a0 color.Color) {
	_m.Called(_a0)
}

// Text provides a mock function with given fields: text, prop
func (_m *MarotoGridPart) Text(text string, prop ...props.Text) {
	_va := make([]interface{}, len(prop))
	for _i := range prop {
		_va[_i] = prop[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewMarotoGridPart interface {
	mock.TestingT
	Cleanup(func())
}

// NewMarotoGridPart creates a new instance of MarotoGridPart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMarotoGridPart(t mockConstructorTestingTNewMarotoGridPart) *MarotoGridPart {
	mock := &MarotoGridPart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
